% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fremParameterTable.R
\name{fremParameterTable}
\alias{fremParameterTable}
\title{Generate the input to a parameter table for a FREM model}
\usage{
fremParameterTable(
  runno = NULL,
  modDevDir = NULL,
  numNonFREMThetas,
  numSkipOm = 0,
  thetaNum,
  omegaNum,
  sigmaNum,
  thetaLabels = paste0("THETA", thetaNum),
  omegaLabels = paste0("OMEGA", omegaNum),
  sigmaLabels = paste0("SIGMA", sigmaNum),
  omegaSD = TRUE,
  sigmaSD = TRUE,
  includeRSE = FALSE,
  bsFile = NULL,
  n = 175,
  availCov = "all",
  dfext = NULL,
  modName = NULL,
  modExt = ".mod",
  lstExt = ".lst",
  quiet = FALSE
)
}
\arguments{
\item{runno}{The run number. Must be provided if \code{modName} is NULL. Will be
used to create NONMEM model and results file names  with the structure
run#.mod and run#. NONMEM ext, phi and cov files will be assumed to be
named run# followed by the appropriate suffix (where # is \code{runno}).}

\item{modDevDir}{The directory where the files reside. Default is the current
directory, i.e. ".".}

\item{numNonFREMThetas}{Number of thetas in the FREM model that are not FREM
covariates. These need to come before the FREM covariate thetas in the FREM
model file.}

\item{numSkipOm}{Number of diagonal omegas that should not be part of the
FREM calculations. Such omegas has to come before the large FREM omega
block in the FREM model file.}

\item{thetaNum}{The theta numbers to include in the output. This refers to
the number associated with the theta value in \code{parVector}. `}

\item{omegaNum}{The omega numbers to include in the output. This refers to
the number associated with the omega value in \code{parVector}. `}

\item{sigmaNum}{The sigma numbers to include in the output. This refers to
the number associated with the omega value in \code{parVector}. `}

\item{thetaLabels}{A vector with labels for the THETAs. Should be as long as
\code{thetaNum}.}

\item{omegaLabels}{A vector with labels for the OMEGAs. Should be as long as
\code{omegaNum}.}

\item{sigmaLabels}{A vector with labels for the SIGMAs Should be as long as
\code{sigmaNum}.}

\item{omegaSD}{Logical. If the omega prims should be reported on the SD scale
(i.e. i.e. the square root of omega prim). Default is \code{TRUE}.}

\item{sigmaSD}{Logical. If the sigmas should be reported on the SD scale
(i.e. i.e. the square root of sigma). Default is \code{TRUE}.}

\item{includeRSE}{Logical. Should the output include relative standard errors
(RSE). Default is \code{FALSE}. See Details.}

\item{bsFile}{The name of a PsNbootstrap or sir file raw_results file. To be
used for RSE calculations based on bootstrap output. See Details.}

\item{n}{The number of samples to use in the RSE calculations. See Details.}

\item{availCov}{Names of the covariates to use in the calculation of the FFEM
model. Should be covariate names used in the FREM model.}

\item{dfext}{A data frame of the ext file for the FREM model. In case of
multiple $EST, the dfext should contain the estimates of the \emph{one} relevant
$EST.}

\item{modName}{The model name. Will be used together with \code{modExt}, \code{lstExt},
ext, phi and cov to form the NONMEM file names, for example
\code{modName}.mod for the model file.}

\item{modExt}{The model file name extension. Default is ".mod".}

\item{lstExt}{The NONMEM out file name extension. Default is ".lst".}

\item{quiet}{If FALSE, will print the FFEM model + associated $OMEGA BLOCK to
STDOUT.}
}
\value{
A list of three components:
\itemize{
\item parameterTable: Is a data frame with information for the parameter table.
\item Samples: A data frame with the parameter vector samples used to derive the RSE information (see Details).
\item Condition: The condition number for variance-covariance matrix of the parameters in the parameter table.
}
}
\description{
The data for a parameter estimates table for a FREM model is assembled,
including the calculation of the appropriate omega prims given the covariates
to take into account.
}
\details{
A FREM model often generates a multitude of parameter estimates (one for each
parameter and covariate combination) and it is typically not very informative
to tabulate these estimates. Forest plots or explained variability plots are
better at communicating the impact of the covariates. However, it is of
interest to see what impact the covariates had on the parameters in the base
model. The \code{fremParameterTable()} function facilitates this by assembling a
data frame with the estimates of the base model THETAs, the omega prims and
sigmas. There are options to not include all parameters in the output.

The derivation of the omega prims is ultimately done by the \code{calcFFEM()}
function. Since the omega prims are dependent on the covariates included in
the calculations, the \code{availCov} argument allows the user to specify a subset
of the available covariates. By default all covariates in the FREM model is
used in the calculations.

Relative standard errors (RSEs) can be included in the output by setting
\code{includeRSE} to \code{TRUE}. Although NONMEM can provide standard errors for all
parameters in the model, the standard errors of the omega prims require a
numerical derivation, and the \code{fremParameterTable()} can do this bases on
either a \code{.cov} from NONMEM or PsN bootstrap or sir raw_results file.

In case \code{bsfile} is \code{NULL}when \code{includeRSE} is \code{TRUE} a
.cov file that match the \code{runno} will be used as input.  \code{n} parameter vectors are sampled
multivariately from the variance-covariance matrix. For each sample, the
corresponding THETA, omega prim and sigma are derived (based on \code{thetaNum},
\code{omegaNum} and \code{sigmaNum}). The RSEs are calculated as the ratio of standard
deviation of the derived parameter to their mean.

In case a .csv file is provided as input and \code{n}=NULL, the input is assumed
to be a sir or bootstrap file. In case of a sir file, the RSEs will be
derived using all samples in the .csv file. In case it is a bootstrap file,
the RSEs will be derived using all samples with a nonzero value in the ofv
column will be used.

In case a .csv file is provided as input and n is not NULL, it is assumed
that the raw results come from a boostrap analysis. A variance-covariance
matrix will be created from the samples with a non-zero value in the ofv
column and the RSEs will be derived based on \code{n} multivariately sampled
parameter vectors from this variance-covariance matrix.

The actual sampling is done by the \code{PMXForest::getSamples()} function.

The \code{Condition} number that is included in the returned list when
\code{includeRSE}is \code{TRUE}, is calculated from the \code{Samples} data frame also
included in the returned list:

\code{Condition <- max(eigen(cor(Samples))$values)/min(eigen(cor(Samples))$values)}

The \code{parameterTable} data frame can be used to generate nice looking
parameter tables for inclusion in reports and paper. The examples section
provides a simple example.
}
\examples{
library(dplyr)
library(magrittr)
library(kableExtra)

set.seed(123)
runno            <- 31
modDevDir        <- system.file("extdata/SimNeb/",package = "PMXFrem")
numNonFREMThetas <- 7
numSkipOm        <- 2

## Generate the raw outout
tmp <- fremParameterTable(
      runno           = runno,
      modDevDir        = modDevDir,
      thetaNum         = 2:7,
      omegaNum         = c(1,3,4,5),
      sigmaNum         = 1,
      thetaLabels      = c("CL (L/h)","V (L)","MAT (h)","D1 (h)","Food on Frel","Food on MAT"),
      omegaLabels      = c("IIV on RUV","IIV on CL","IIV on V","IIV on MAT"),
      sigmaLabels      = c("RUV"),
      includeRSE       = TRUE,
      numNonFREMThetas = numNonFREMThetas,
      numSkipOm        = numSkipOm,
      availCov         = "all",
      quiet            = TRUE)

## Use kable_extra to generate a nice looking table
tmp$parameterTable \%>\%
    mutate(Estimate=as.character(signif(Estimate,3)))\%>\%
    kbl() \%>\%
    kable_classic(full_width = FALSE, html_font = "Cambria")
}
\seealso{
\code{\link[PMXForest:getSamples]{PMXForest::getSamples()}} \code{\link[=calcFFEM]{calcFFEM()}}
}
